apply plugin: "jacoco"

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {

//    reports {
//        xml.enabled(true)
//        html.enabled(true)
//    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*MemberInjector.*',
                      '**/*$$Factory*.*', '**/*..State*.*', '**/*_ViewBinding*.*', 'com/bumptech/**/*.*', '**/injection/**/*.*',
                      '**/*__Factory*.*', '**/*PresenterBinder*.*', '**/*ViewState*.*']
    def mainSrc = "${project.projectDir}/src/main/java"
    def kotlinSrc = "${project.projectDir}/src/main/kotlin"

    classDirectories.setFrom(fileTree(
            dir: "$buildDir/intermediates/javac/debug/classes",
            excludes: fileFilter) + fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: fileFilter))

    // sources
    sourceDirectories.setFrom(files([
            mainSrc,
            kotlinSrc
    ]))

    executionData.setFrom(files("${buildDir}/jacoco/testDebugUnitTest.exec"))
}
